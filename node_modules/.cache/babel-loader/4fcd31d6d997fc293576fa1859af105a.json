{"ast":null,"code":"var _jsxFileName = \"/Users/Jenna/JavaScript/_Projects/norman-ed/client/src/components/pages/contact/contactForm.js\";\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nconst schema = yup.object().shape({\n  name: yup.string().min(2, 'Name must be at least 2 characters').max(50, 'Name cannot exceed 50 characters').required('Name is required'),\n  email: yup.string().email('Valid email is required').required('Email is required'),\n  message: yup.string().min(10, 'Message must be at least 10 characters').max(600, 'Message cannot exceed 600 characters').required('Message is required')\n});\n\nclass ContactForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n      formSubmitted: false\n    };\n  } // Handle form change\n\n\n  handleChange(event) {\n    this.setState({\n      message: event.target.value\n    });\n  } // Submit method\n\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const _this$props$env = this.props.env,\n          receiverEmail = _this$props$env.REACT_APP_EMAILJS_RECEIVER,\n          template = _this$props$env.REACT_APP_EMAILJS_TEMPLATEID;\n    this.sendMessage(template, this.senderName, this.senderEmail, receiverEmail, this.state.message);\n    this.setState({\n      formSubmitted: true\n    });\n  }\n\n  sendMessage(templateId, senderName, senderEmail, receiverEmail, message) {\n    window.emailjs.send('gmail', templateId, {\n      senderName,\n      senderEmail,\n      message\n    }).then(res => {\n      this.setState({\n        formEmailSent: true\n      });\n    }) // Error handling\n    .catch(err => console.log('Failed to send message. Error: ', err));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"contact-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      validationSchema: schema,\n      initialValues: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, ({\n      isSubmitting\n    }) => React.createElement(Form, {\n      id: \"contact-form\",\n      role: \"form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      for: true,\n      name: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Name\"), React.createElement(Field, {\n      type: \"name\",\n      name: \"name\",\n      id: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"name\",\n      component: \"span\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      for: true,\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Email\"), React.createElement(Field, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"email\",\n      component: \"span\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      for: true,\n      name: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Message\"), React.createElement(Field, {\n      component: \"textarea\",\n      name: \"message\",\n      id: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"message\",\n      component: \"span\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Send\"))));\n  }\n\n}\n\nexport default ContactForm;","map":{"version":3,"sources":["/Users/Jenna/JavaScript/_Projects/norman-ed/client/src/components/pages/contact/contactForm.js"],"names":["React","Formik","Form","Field","ErrorMessage","yup","schema","object","shape","name","string","min","max","required","email","message","ContactForm","Component","constructor","props","state","formSubmitted","handleChange","event","setState","target","value","handleSubmit","preventDefault","env","receiverEmail","REACT_APP_EMAILJS_RECEIVER","template","REACT_APP_EMAILJS_TEMPLATEID","sendMessage","senderName","senderEmail","templateId","window","emailjs","send","then","res","formEmailSent","catch","err","console","log","render","values","setSubmitting","setTimeout","alert","JSON","stringify","isSubmitting"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAGA,MAAMC,MAAM,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAC9BC,EAAAA,IAAI,EAAEJ,GAAG,CAACK,MAAJ,GACDC,GADC,CACG,CADH,EACM,oCADN,EAEDC,GAFC,CAEG,EAFH,EAEO,kCAFP,EAGDC,QAHC,CAGQ,kBAHR,CADwB;AAK9BC,EAAAA,KAAK,EAAET,GAAG,CAACK,MAAJ,GACFI,KADE,CACI,yBADJ,EAEFD,QAFE,CAEO,mBAFP,CALuB;AAQ9BE,EAAAA,OAAO,EAAEV,GAAG,CAACK,MAAJ,GACJC,GADI,CACA,EADA,EACI,wCADJ,EAEJC,GAFI,CAEA,GAFA,EAEK,sCAFL,EAGJC,QAHI,CAGK,qBAHL;AARqB,CAAnB,CAAf;;AAeA,MAAMG,WAAN,SAA0BhB,KAAK,CAACiB,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTL,MAAAA,OAAO,EAAE,EADA;AAETM,MAAAA,aAAa,EAAE;AAFN,KAAb;AAIH,GARqC,CAUtC;;;AACAC,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChB,SAAKC,QAAL,CAAc;AACVT,MAAAA,OAAO,EAAEQ,KAAK,CAACE,MAAN,CAAaC;AADZ,KAAd;AAGH,GAfqC,CAiBtC;;;AACAC,EAAAA,YAAY,CAACJ,KAAD,EAAQ;AAChBA,IAAAA,KAAK,CAACK,cAAN;AADgB,4BAMZ,KAAKT,KAAL,CAAWU,GANC;AAAA,UAIgBC,aAJhB,mBAIZC,0BAJY;AAAA,UAKkBC,QALlB,mBAKZC,4BALY;AAQhB,SAAKC,WAAL,CACIF,QADJ,EAEI,KAAKG,UAFT,EAGI,KAAKC,WAHT,EAIIN,aAJJ,EAKI,KAAKV,KAAL,CAAWL,OALf;AAQA,SAAKS,QAAL,CAAc;AACVH,MAAAA,aAAa,EAAE;AADL,KAAd;AAGH;;AAEDa,EAAAA,WAAW,CAACG,UAAD,EAAaF,UAAb,EAAyBC,WAAzB,EAAsCN,aAAtC,EAAqDf,OAArD,EAA8D;AACrEuB,IAAAA,MAAM,CAACC,OAAP,CACKC,IADL,CACU,OADV,EACmBH,UADnB,EAC+B;AACvBF,MAAAA,UADuB;AAEvBC,MAAAA,WAFuB;AAGvBrB,MAAAA;AAHuB,KAD/B,EAMK0B,IANL,CAMUC,GAAG,IAAI;AACT,WAAKlB,QAAL,CAAc;AACVmB,QAAAA,aAAa,EAAE;AADL,OAAd;AAGH,KAVL,EAWI;AAXJ,KAYKC,KAZL,CAYWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,GAA/C,CAZlB;AAaH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,gBAAgB,EAAE1C,MADtB;AAEI,MAAA,aAAa,EAAE;AACXG,QAAAA,IAAI,EAAE,EADK;AAEXK,QAAAA,KAAK,EAAE,EAFI;AAGXC,QAAAA,OAAO,EAAE;AAHE,OAFnB;AAOI,MAAA,QAAQ,EAAE,CAACkC,MAAD,EAAS;AAAEC,QAAAA;AAAF,OAAT,KAA+B;AACrCC,QAAAA,UAAU,CAAC,MAAM;AACbC,UAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeL,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAC,UAAAA,aAAa,CAAC,KAAD,CAAb;AACH,SAHS,EAGP,GAHO,CAAV;AAIH,OAZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAcS,CAAC;AAAEK,MAAAA;AAAF,KAAD,KACG,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,cAAT;AAAwB,MAAA,IAAI,EAAC,MAA7B;AAAoC,MAAA,QAAQ,EAAE,KAAK5B,YAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,GAAG,MAAV;AAAW,MAAA,IAAI,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,EAAE,EAAC,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,MAAnB;AAA0B,MAAA,SAAS,EAAC,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII;AAAO,MAAA,GAAG,MAAV;AAAW,MAAA,IAAI,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJJ,EAKI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,IAAI,EAAC,OAAzB;AAAiC,MAAA,EAAE,EAAC,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMI,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,OAAnB;AAA2B,MAAA,SAAS,EAAC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,EAOI;AAAO,MAAA,GAAG,MAAV;AAAW,MAAA,IAAI,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPJ,EAQI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,UAAjB;AAA4B,MAAA,IAAI,EAAC,SAAjC;AAA2C,MAAA,EAAE,EAAC,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EASI,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,SAAnB;AAA6B,MAAA,SAAS,EAAC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAUI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAE4B,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,CAfZ,CADJ,CADJ;AAmCH;;AA3FqC;;AA8F1C,eAAevC,WAAf","sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\n\nconst schema = yup.object().shape({\n    name: yup.string()\n        .min(2, 'Name must be at least 2 characters')\n        .max(50, 'Name cannot exceed 50 characters')\n        .required('Name is required'),\n    email: yup.string()\n        .email('Valid email is required')\n        .required('Email is required'),\n    message: yup.string()\n        .min(10, 'Message must be at least 10 characters')\n        .max(600, 'Message cannot exceed 600 characters')\n        .required('Message is required')\n});\n\n\nclass ContactForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: '',\n            formSubmitted: false\n        }\n    }\n\n    // Handle form change\n    handleChange(event) {\n        this.setState({\n            message: event.target.value\n        });\n    }\n\n    // Submit method\n    handleSubmit(event) {\n        event.preventDefault();\n\n        const {\n            REACT_APP_EMAILJS_RECEIVER: receiverEmail,\n            REACT_APP_EMAILJS_TEMPLATEID: template\n        } = this.props.env;\n\n        this.sendMessage(\n            template,\n            this.senderName,\n            this.senderEmail,\n            receiverEmail,\n            this.state.message\n        );\n\n        this.setState({\n            formSubmitted: true\n        });\n    }\n\n    sendMessage(templateId, senderName, senderEmail, receiverEmail, message) {\n        window.emailjs\n            .send('gmail', templateId, {\n                senderName,\n                senderEmail,\n                message\n            })\n            .then(res => {\n                this.setState({\n                    formEmailSent: true\n                });\n            })\n            // Error handling\n            .catch(err => console.log('Failed to send message. Error: ', err));\n    }\n\n    render() {\n        return (\n            <div className=\"contact-form\">\n                <Formik\n                    validationSchema={schema}\n                    initialValues={{\n                        name: '', \n                        email: '', \n                        message: '' \n                    }}\n                    onSubmit={(values, { setSubmitting }) => {\n                        setTimeout(() => {\n                            alert(JSON.stringify(values, null, 2));\n                            setSubmitting(false);\n                        }, 400);\n                    }}\n                    >\n                        {({ isSubmitting }) => (\n                            <Form id=\"contact-form\" role=\"form\" onSubmit={this.handleSubmit}>\n                                <label for name=\"name\">Name</label>\n                                <Field type=\"name\" name=\"name\" id=\"name\" />\n                                <ErrorMessage name=\"name\" component=\"span\" />\n                                <label for name=\"email\">Email</label>\n                                <Field type=\"email\" name=\"email\" id=\"email\" />\n                                <ErrorMessage name=\"email\" component=\"span\" />\n                                <label for name=\"message\">Message</label>\n                                <Field component=\"textarea\" name=\"message\" id=\"message\" />\n                                <ErrorMessage name=\"message\" component=\"span\" />\n                                <button type=\"submit\" disabled={isSubmitting} >\n                                    Send\n                                </button>\n                            </Form>\n                        )}\n                </Formik>\n            </div>\n        );\n    }\n}\n\nexport default ContactForm;"]},"metadata":{},"sourceType":"module"}